// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel-plugin should attach 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/attach.js'
import {attach, createEffect} from 'effector'
const effect = createEffect({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'effect',
  sid: '-vu09ir',
})
const foo1 = attach({
  and: {
    effect,
    mapParams: _ => _,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 5,
      column: 13,
    },
    name: 'foo1',
    sid: '-tiwbqg',
  },
})
attach({
  and: {
    effect,
    mapParams: _ => _,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 0,
    },
    sid: 'nqxaub',
  },
})
const config = {
  effect,
  mapParams: _ => _,
}
const foo2 = attach({
  and: config,
  or: {
    loc: {
      file: _effectorFileName,
      line: 20,
      column: 13,
    },
    name: 'foo2',
    sid: '-p9uo9',
  },
})

const f = () =>
  attach({
    and: {
      effect,
      mapParams: _ => _,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 23,
        column: 2,
      },
      name: 'f',
      sid: '2cwab9',
    },
  })

{
  const incorrect = attach(config)

  function attach() {}
}
{
  const attach = () => {}

  const incorrect = attach(config)
}
{
  const attach = () => {}

  if (true) {
    const incorrect = attach(config)
  }
}
"
`;

exports[`babel-plugin should combine 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/combine.js'
import {createStore, combine} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'l92igv',
})
const bar = createStore('h', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-5kp0ms',
})
const baz1 = combine({
  and: [
    {
      foo,
      bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: '-q4v2dz',
  },
})
const baz2 = combine({
  and: [[foo, bar]],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: 'f04ysq',
  },
})
const baz3 = combine({
  and: [foo, bar, (a, b) => [a, b]],
  or: {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 13,
    },
    name: 'baz3',
    sid: '-evz1zp',
  },
})
const spread = [foo, bar]
const baz4 = combine({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 11,
      column: 13,
    },
    name: 'baz4',
    sid: 'q90z70',
  },
})
const shape = {
  foo,
  bar,
}
const baz5 = combine({
  and: [shape],
  or: {
    loc: {
      file: _effectorFileName,
      line: 14,
      column: 13,
    },
    name: 'baz5',
    sid: '-3n31lf',
  },
})
combine({
  and: [
    {
      foo,
      bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 16,
      column: 0,
    },
    sid: 'puoa7n',
  },
})
combine({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 17,
      column: 0,
    },
    sid: '-qfrkb0',
  },
})

const f = a =>
  combine({
    and: [
      {
        foo,
        bar,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 19,
        column: 15,
      },
      name: 'f',
      sid: '-nsf5z7',
    },
  })

{
  const incorrect = combine({
    foo,
  })

  function combine() {}
}
{
  const combine = () => {}

  if (true) {
    const incorrect = combine({
      foo,
    })
  }
}
"
`;

exports[`babel-plugin should create domain 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: 'rrntu0',
})
const foo = createDomain('bar', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'foo',
  sid: 'kjh62q',
})
const {sid} = createDomain({
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 14,
  },
  sid: '-jo1r78',
})
const {name} = createDomain('foo', {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 15,
  },
  sid: 'febcvf',
})
const {shortName} = createDomain(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 20,
    },
    sid: '-kkfl12',
  },
)
createDomain({
  loc: {
    file: _effectorFileName,
    line: 10,
    column: 0,
  },
  sid: '9gz7yc',
})
createDomain({
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 0,
  },
  sid: 'kxt16t',
})
{
  const incorrect = createDomain()

  function createDomain() {}
}
{
  const createDomain = () => {}

  if (true) {
    const incorrect = createDomain()
  }
}
"
`;

exports[`babel-plugin should create domain domain 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-domain.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '-ix6i09',
})
const foo = domain.domain({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'foo',
  sid: '-696zhp',
})
const bar = domain.domain('baz', {
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 12,
  },
  name: 'bar',
  sid: '-x2yilc',
})
const fooAlias = domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 17,
  },
  name: 'fooAlias',
  sid: '-zgfq83',
})
const barAlias = domain.createDomain('bazAlias', {
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 17,
  },
  name: 'barAlias',
  sid: '1aktg0',
})
const {sid} = domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 10,
    column: 14,
  },
  sid: 'yqoljx',
})
const {name} = domain.createDomain('foo', {
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 15,
  },
  sid: 'qqpra6',
})
const {shortName} = domain.createDomain(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 20,
    },
    sid: 'iqqx0f',
  },
)
domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 0,
  },
  sid: 'q3n8pf',
})
domain.createDomain({
  loc: {
    file: _effectorFileName,
    line: 16,
    column: 0,
  },
  sid: '-3sp7da',
})
"
`;

exports[`babel-plugin should create domain effect 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-effect.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '-1gg7oc',
})
const a = domain.effect({
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: 'eq5u2p',
})

const f = () =>
  domain.effect({
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 16,
    },
    name: 'f',
    sid: 'h3177q',
  })

const b = domain.effect('hello', {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 10,
  },
  name: 'b',
  sid: 'tek4aq',
})

const g = () =>
  domain.effect('baz', {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 16,
    },
    name: 'g',
    sid: 'vrfhfr',
  })

const aAlias = domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 15,
  },
  name: 'aAlias',
  sid: '-sc01v5',
})

const fAlias = () =>
  domain.createEffect({
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 21,
    },
    name: 'fAlias',
    sid: '-hnqljq',
  })

const bAlias = domain.createEffect('helloAlias', {
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 15,
  },
  name: 'bAlias',
  sid: '-q75d02',
})

const gAlias = () =>
  domain.createEffect('bazAlias', {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 21,
    },
    name: 'gAlias',
    sid: '-fivwon',
  })

const {sid} = domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 14,
  },
  sid: 'p1tvsg',
})
const {name} = domain.createEffect('foo', {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 15,
  },
  sid: 'h1v1ip',
})
const {shortName} = domain.createEffect(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 16,
      column: 20,
    },
    sid: '91w78y',
  },
)
domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 0,
  },
  sid: '-3ksmg0',
})
domain.createEffect({
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 0,
  },
  sid: '-xh52ip',
})
"
`;

exports[`babel-plugin should create domain event 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-event.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: 'kcir2t',
})
const a = domain.event({
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: 'ip0pkg',
})

const f = () =>
  domain.event({
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 16,
    },
    name: 'f',
    sid: 'l1w2ph',
  })

const b = domain.event('asm', {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 10,
  },
  name: 'b',
  sid: 'xdezsh',
})

const g = () =>
  domain.event('tasm', {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 16,
    },
    name: 'g',
    sid: '-zatp1m',
  })

const aAlias = domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 15,
  },
  name: 'aAlias',
  sid: '-6j1340',
})

const fAlias = () =>
  domain.createEvent({
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 21,
    },
    name: 'fAlias',
    sid: '458d7f',
  })

const bAlias = domain.createEvent('asmAlias', {
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 15,
  },
  name: 'bAlias',
  sid: '-4e6e8x',
})

const gAlias = () =>
  domain.createEvent('tasmAlias', {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 21,
    },
    name: 'gAlias',
    sid: '6a322i',
  })

const {sid} = domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 14,
  },
  sid: 'wxlvrz',
})
const {name} = domain.createEvent('foo', {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 15,
  },
  sid: '-mbdqgy',
})
const {shortName} = domain.createEvent(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 16,
      column: 20,
    },
    sid: '-6j9aqr',
  },
)
domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 0,
  },
  sid: '5prh5d',
})
domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 0,
  },
  sid: '-dkuvhq',
})
domain.createEvent('foo', {
  loc: {
    file: _effectorFileName,
    line: 22,
    column: 0,
  },
  sid: '-wvh84t',
})
"
`;

exports[`babel-plugin should create domain store 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-domain-store.js'
import {createDomain} from 'effector'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 15,
  },
  name: 'domain',
  sid: '-wcigx0',
})
const a = domain.store('bar', {
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: '-2w4c0',
})
const b = domain.store('h', {
  and: {
    option: 'test',
    ['na' + 'me']: 'LOL',
  },
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'b',
  sid: 'eli5w1',
})
const c = domain.store('h', {
  and: {
    name: 'test',
  },
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 10,
  },
  name: 'c',
  sid: 't9wg42',
})
const d = domain.store('h', {
  and: null,
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 10,
  },
  name: 'd',
  sid: '-r2tbn1',
})
const e = domain.store('h', {
  and: 4234,
  loc: {
    file: _effectorFileName,
    line: 11,
    column: 10,
  },
  name: 'e',
  sid: '-cef1f0',
})
const f = domain.store('h', {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 10,
  },
  name: 'f',
  sid: '29z8t1',
})
const aAlias = domain.createStore('bar', {
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 15,
  },
  name: 'aAlias',
  sid: 'c0pspa',
})
const bAlias = domain.createStore('h', {
  and: {
    option: 'test',
    ['na' + 'me']: 'LOL',
  },
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 15,
  },
  name: 'bAlias',
  sid: 'e5khkd',
})
const cAlias = domain.createStore('h', {
  and: {
    name: 'testAlias',
  },
  loc: {
    file: _effectorFileName,
    line: 16,
    column: 15,
  },
  name: 'cAlias',
  sid: 'gaf6fg',
})
const dAlias = domain.createStore('h', {
  and: null,
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 15,
  },
  name: 'dAlias',
  sid: 'if9vaj',
})
const eAlias = domain.createStore('h', {
  and: 4234,
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 15,
  },
  name: 'eAlias',
  sid: 'kk4k5m',
})
const fAlias = domain.createStore('h', {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 21,
    column: 15,
  },
  name: 'fAlias',
  sid: 'moz90p',
})
const {sid} = domain.createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 22,
    column: 14,
  },
  sid: '-w3s75t',
})
const {shortName} = domain.createStore(null, {
  and: {
    name: 'foo',
  },
  loc: {
    file: _effectorFileName,
    line: 23,
    column: 20,
  },
  sid: '-gbnrfm',
})
domain.createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 25,
    column: 0,
  },
  sid: '-3ukiap',
})
domain.createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 27,
    column: 0,
  },
  sid: '-n56uxs',
})
"
`;

exports[`babel-plugin should create effect 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-effect.js'
import {createEffect} from 'effector'
const foo = createEffect({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-m4iqp7',
})
const bar = createEffect('hello', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: 'm2ts6a',
})
const baz = createEffect(
  {
    handler() {
      return 0
    },
  },
  {
    loc: {
      file: _effectorFileName,
      line: 5,
      column: 12,
    },
    name: 'baz',
    sid: '-2k81zq',
  },
)
const quux = createEffect('nice', {
  and: {
    handler() {
      return 0
    },
  },
  loc: {
    file: _effectorFileName,
    line: 10,
    column: 13,
  },
  name: 'quux',
  sid: 'jac048',
})

const f = () =>
  createEffect({
    loc: {
      file: _effectorFileName,
      line: 15,
      column: 16,
    },
    name: 'f',
    sid: '-17v2a3',
  })

const {sid} = createEffect({
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 14,
  },
  sid: '-tcwgyp',
})
const {name} = createEffect('foo', {
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 15,
  },
  sid: '5pgn3y',
})
const {shortName} = createEffect(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 20,
    },
    sid: '-u9aasj',
  },
)
createEffect({
  loc: {
    file: _effectorFileName,
    line: 21,
    column: 0,
  },
  sid: '-k7gn73',
})
createEffect({
  loc: {
    file: _effectorFileName,
    line: 23,
    column: 0,
  },
  sid: '-8qmtym',
})
{
  const incorrect = createEffect()

  function createEffect() {}
}
{
  const createEffect = () => {}

  if (true) {
    const incorrect = createEffect()
  }
}
"
`;

exports[`babel-plugin should create event 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-event.js'
import {createEvent} from 'effector'
const foo = createEvent({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 't55c6',
})
const bar = createEvent('hello', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-q0mdrh',
})
const baz = createEvent(
  {
    name: 'nice',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 5,
      column: 12,
    },
    name: 'baz',
    sid: 'kdfu1n',
  },
)

const f = () =>
  createEvent({
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 16,
    },
    name: 'f',
    sid: '4f81ye',
  })

const {sid} = createEvent({
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 14,
  },
  sid: 'ak19w0',
})
const {name} = createEvent('foo', {
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 15,
  },
  sid: '73s58x',
})
const {shortName} = createEvent(
  {
    name: 'foo',
  },
  {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 20,
    },
    sid: '3nj0lu',
  },
)
createEvent({
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 0,
  },
  sid: 'yysegw',
})
createEvent({
  loc: {
    file: _effectorFileName,
    line: 14,
    column: 0,
  },
  sid: '-stjl7l',
})
{
  const incorrect = createEvent()

  function createEvent() {}
}
{
  const createEvent = () => {}

  if (true) {
    const incorrect = createEvent()
  }
}
"
`;

exports[`babel-plugin should create gate 1`] = `
"var _effectorFileName2 = '/src/babel/__tests__/fixtures/create-gate.js'
import {createDomain} from 'effector'
import {createGate} from 'effector-react'
import {createGate as renamedGate} from 'effector-react/scope'
import {createGate as compatGate} from 'effector-react/compat'
const Gate1 = createGate({
  and: [],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 6,
      column: 14,
    },
    name: 'Gate1',
    sid: '-ov388m',
  },
})
const Gate2 = createGate({
  and: ['gate2'],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 7,
      column: 14,
    },
    name: 'Gate2',
    sid: '-oe1luf',
  },
})
const Gate3 = createGate({
  and: [
    {
      defaultState: {
        a: 1,
      },
      domain: createDomain({
        loc: {
          file: _effectorFileName2,
          line: 10,
          column: 10,
        },
        name: 'domain',
        sid: '-e7s2y9',
      }),
      name: 'gate3',
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 8,
      column: 14,
    },
    name: 'Gate3',
    sid: '-nwzzg8',
  },
})
const Gate4 = createGate({
  and: [
    'default',
    {
      counter: 0,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 13,
      column: 14,
    },
    name: 'Gate4',
    sid: '-nfyd21',
  },
})
const Gate5 = createGate({
  and: [
    {
      and: ['gate2'],
      or: {
        loc: {
          file: _effectorFileName,
          line: 7,
          column: 14,
        },
        sid: '4gk531',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 14,
      column: 14,
    },
    name: 'Gate5',
    sid: '-mywqnu',
  },
})
const TheGate1 = renamedGate({
  and: [],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 26,
      column: 17,
    },
    name: 'TheGate1',
    sid: '-wij8d7',
  },
})
const TheGate2 = renamedGate({
  and: ['gate2'],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 27,
      column: 17,
    },
    name: 'TheGate2',
    sid: '-w1hlz0',
  },
})
const TheGate3 = renamedGate({
  and: [
    {
      defaultState: {
        a: 1,
      },
      domain: createDomain({
        loc: {
          file: _effectorFileName2,
          line: 30,
          column: 10,
        },
        name: 'domain',
        sid: '-9kv7lc',
      }),
      name: 'gate3',
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 28,
      column: 17,
    },
    name: 'TheGate3',
    sid: '-vkfzkt',
  },
})
const CompatGate1 = compatGate({
  and: [],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 34,
      column: 20,
    },
    name: 'CompatGate1',
    sid: '-mloe50',
  },
})
const CompatGate2 = compatGate({
  and: ['gate2'],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 35,
      column: 20,
    },
    name: 'CompatGate2',
    sid: '-m4mrqt',
  },
})
const CompatGate3 = compatGate({
  and: [
    {
      defaultState: {
        a: 1,
      },
      domain: createDomain({
        loc: {
          file: _effectorFileName2,
          line: 38,
          column: 10,
        },
        name: 'domain',
        sid: '-4xyc8f',
      }),
      name: 'gate3',
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 36,
      column: 20,
    },
    name: 'CompatGate3',
    sid: '-lnl5cm',
  },
})
"
`;

exports[`babel-plugin should create store 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/create-store.js'
import {createStore} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '86c6na',
})
const a = createStore('h', {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 10,
  },
  name: 'a',
  sid: '-gpk533',
})
const b = createStore('h', {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'b',
  sid: '-215uv2',
})
const c = createStore('h', {
  and: 23020,
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'c',
  sid: 'cn8fcz',
})
const config = {
  option: 0,
}
const dod = createStore(null, {
  and: config,
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 12,
  },
  name: 'dod',
  sid: '-mgou93',
})

const f = a =>
  createStore(a, {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 15,
    },
    name: 'f',
    sid: '-ecory2',
  })

const {sid} = createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 14,
  },
  sid: 'gjr8xc',
})
const {shortName} = createStore(null, {
  and: {
    name: 'foo',
  },
  loc: {
    file: _effectorFileName,
    line: 13,
    column: 20,
  },
  sid: 'd3i4a9',
})
createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 0,
  },
  sid: 'pegf0u',
})
createStore(null, {
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 0,
  },
  sid: 'wn8hbh',
})
{
  const incorrect = createStore(null)

  function createStore() {}
}
{
  const createStore = () => {}

  if (true) {
    const incorrect = createStore(null)
  }
}
"
`;

exports[`babel-plugin should createApi 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/createApi.js'
import {createStore, createEvent, createApi} from 'effector'
const foo = createStore([], {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '1yfg9s',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-p304nu',
})
const baz1 = createApi({
  and: [
    foo,
    {
      reset: () => [],
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    sid: '-74i51r',
  },
})
createApi({
  and: [
    foo,
    {
      reset: () => [],
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 0,
    },
    sid: '4cbo6q',
  },
})
const spread = [
  foo,
  {
    reset: () => [],
  },
]
const baz4 = createApi({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 13,
    },
    sid: 'ft5hf7',
  },
})

const f = () =>
  createApi({
    and: [
      foo,
      {
        reset: () => [],
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 12,
        column: 16,
      },
      sid: 'r9zano',
    },
  })

{
  const incorrect = createApi(foo, {})

  function createApi() {}
}
{
  const createApi = () => {}

  if (true) {
    const incorrect = createApi(foo, {})
  }
}
"
`;

exports[`babel-plugin should createGate 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/createGate.js'
import {createGate} from 'effector-react'
import {createGate as createGateScope} from 'effector-react/scope'
{
  const Empty = createGate({
    and: [],
    or: {
      loc: {
        file: _effectorFileName,
        line: 5,
        column: 16,
      },
      name: 'Empty',
      sid: '3k6646',
    },
  })
  const Name = createGate({
    and: ['Foo'],
    or: {
      loc: {
        file: _effectorFileName,
        line: 6,
        column: 15,
      },
      name: 'Name',
      sid: '-w618uc',
    },
  })
  const ConfigObject = createGate({
    and: [
      {
        defaultState: 0,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 7,
        column: 23,
      },
      name: 'ConfigObject',
      sid: 'tnqqu',
    },
  })
  const config = {
    defaultState: 0,
  }
  const ConfigVariable = createGate({
    and: [config],
    or: {
      loc: {
        file: _effectorFileName,
        line: 9,
        column: 25,
      },
      name: 'ConfigVariable',
      sid: '-34vrhz',
    },
  })
}
{
  const Empty = createGateScope({
    and: [],
    or: {
      loc: {
        file: _effectorFileName,
        line: 13,
        column: 16,
      },
      name: 'Empty',
      sid: '3wa2j9',
    },
  })
  const Name = createGateScope({
    and: ['Foo'],
    or: {
      loc: {
        file: _effectorFileName,
        line: 14,
        column: 15,
      },
      name: 'Name',
      sid: '-kp7flv',
    },
  })
  const ConfigObject = createGateScope({
    and: [
      {
        defaultState: 0,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 15,
        column: 23,
      },
      name: 'ConfigObject',
      sid: '-2mldw9',
    },
  })
  const config = {
    defaultState: 0,
  }
  const ConfigVariable = createGateScope({
    and: [config],
    or: {
      loc: {
        file: _effectorFileName,
        line: 17,
        column: 25,
      },
      name: 'ConfigVariable',
      sid: 'ifpx56',
    },
  })
}
"
`;

exports[`babel-plugin should debug sids with options 1`] = `
"import {
  createDomain,
  createEffect,
  createEvent,
  createStore,
  restore,
} from 'effector'
{
  const domain = createDomain({
    name: 'domain',
    sid: 'iv0ize1-/src/babel/__tests__/fixtures/debug-sids.js:domain:event [9:17]',
  })
  const a = domain.store('bar', {
    name: 'a',
    sid: '-c2jsa61-/src/babel/__tests__/fixtures/debug-sids.js:a:store [11:12]',
  })
  const b = domain.store('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    name: 'b',
    sid: '2luhxv1-/src/babel/__tests__/fixtures/debug-sids.js:b:store [12:12]',
  })
  const c = domain.store('h', {
    and: {
      name: 'test',
    },
    name: 'c',
    sid: 'ha8s5w1-/src/babel/__tests__/fixtures/debug-sids.js:c:store [13:12]',
  })
  const d = domain.store('h', {
    and: null,
    name: 'd',
    sid: 'vyn2dx1-/src/babel/__tests__/fixtures/debug-sids.js:d:store [15:12]',
  })
  const e = domain.store('h', {
    and: 4234,
    name: 'e',
    sid: '-oe2pd61-/src/babel/__tests__/fixtures/debug-sids.js:e:store [17:12]',
  })
  const f = domain.store('h', {
    and: {},
    name: 'f',
    sid: '-9pof551-/src/babel/__tests__/fixtures/debug-sids.js:f:store [18:12]',
  })
  const aAlias = domain.createStore('bar', {
    name: 'aAlias',
    sid: '-7sv9dg1-/src/babel/__tests__/fixtures/debug-sids.js:aAlias:store [20:17]',
  })
  const bAlias = domain.createStore('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    name: 'bAlias',
    sid: '-5o0kid1-/src/babel/__tests__/fixtures/debug-sids.js:bAlias:store [21:17]',
  })
  const cAlias = domain.createStore('h', {
    and: {
      name: 'testAlias',
    },
    name: 'cAlias',
    sid: '-3j5vna1-/src/babel/__tests__/fixtures/debug-sids.js:cAlias:store [22:17]',
  })
  const dAlias = domain.createStore('h', {
    and: null,
    name: 'dAlias',
    sid: '-1eb6s71-/src/babel/__tests__/fixtures/debug-sids.js:dAlias:store [24:17]',
  })
  const eAlias = domain.createStore('h', {
    and: 4234,
    name: 'eAlias',
    sid: 'qji2w1-/src/babel/__tests__/fixtures/debug-sids.js:eAlias:store [26:17]',
  })
  const fAlias = domain.createStore('h', {
    and: {},
    name: 'fAlias',
    sid: '2ve6xz1-/src/babel/__tests__/fixtures/debug-sids.js:fAlias:store [27:17]',
  })
  const {sid} = domain.createStore(null, {
    sid: '7hvcu91-/src/babel/__tests__/fixtures/debug-sids.js:undefined:store [28:16]',
  })
  const {shortName} = domain.createStore(null, {
    and: {
      name: 'foo',
    },
    sid: '-bsqzsu2-/src/babel/__tests__/fixtures/debug-sids.js:undefined:store [29:22]',
  })
  domain.createStore(null, {
    sid: '-defzkz1-/src/babel/__tests__/fixtures/debug-sids.js::store [31:2]',
  })
  domain.createStore(null, {
    sid: '-oi0782-/src/babel/__tests__/fixtures/debug-sids.js::store [33:2]',
  })
}
{
  const foo = createEffect({
    name: 'foo',
    sid: '-8qxjps1-/src/babel/__tests__/fixtures/debug-sids.js:foo:event [37:14]',
  })
  const bar = createEffect('hello', {
    name: 'bar',
    sid: 'zgez5p1-/src/babel/__tests__/fixtures/debug-sids.js:bar:event [38:14]',
  })
  const baz = createEffect(
    {
      handler() {
        return 0
      },
    },
    {
      name: 'baz',
      sid: 'atd4zp1-/src/babel/__tests__/fixtures/debug-sids.js:baz:event [39:14]',
    },
  )
  const quux = createEffect('nice', {
    and: {
      handler() {
        return 0
      },
    },
    name: 'quux',
    sid: '7sworh1-/src/babel/__tests__/fixtures/debug-sids.js:quux:event [44:15]',
  })

  const fa = () =>
    createEffect({
      name: 'fa',
      sid: 'v0epjl1-/src/babel/__tests__/fixtures/debug-sids.js:fa:event [49:19]',
    })

  const {sid} = createEffect({
    sid: '7a7b0a1-/src/babel/__tests__/fixtures/debug-sids.js:undefined:event [51:16]',
  })
  const {name} = createEffect('foo', {
    sid: '-c0f1mt2-/src/babel/__tests__/fixtures/debug-sids.js:undefined:event [52:17]',
  })
  const {shortName} = createEffect(
    {
      name: 'foo',
    },
    {
      sid: '-vb1e9w3-/src/babel/__tests__/fixtures/debug-sids.js:undefined:event [53:22]',
    },
  )
  createEffect({
    sid: '-dm41ey1-/src/babel/__tests__/fixtures/debug-sids.js::event [55:2]',
  })
  createEffect({
    sid: '-w62172-/src/babel/__tests__/fixtures/debug-sids.js::event [57:2]',
  })
}
{
  const foo = createStore('foo', {
    name: 'foo',
    sid: '-8j9hvt1-/src/babel/__tests__/fixtures/debug-sids.js:foo:store [61:14]',
  })
  const a = createStore('h', {
    name: 'a',
    sid: 'r45eoj2-/src/babel/__tests__/fixtures/debug-sids.js:a:store [62:12]',
  })
  const b = createStore('h', {
    and: {},
    name: 'b',
    sid: '-t8kd2k2-/src/babel/__tests__/fixtures/debug-sids.js:b:store [63:12]',
  })
  const c = createStore('h', {
    and: 23020,
    name: 'c',
    sid: '-ek62uj2-/src/babel/__tests__/fixtures/debug-sids.js:c:store [65:12]',
  })
  const config = {
    option: 0,
  }
  const dod = createStore(null, {
    and: config,
    name: 'dod',
    sid: 'vutj6y1-/src/babel/__tests__/fixtures/debug-sids.js:dod:store [67:14]',
  })

  const f = a =>
    createStore(a, {
      name: 'f',
      sid: 'th0rtk2-/src/babel/__tests__/fixtures/debug-sids.js:f:store [69:17]',
    })

  const {sid} = createStore(null, {
    sid: '-v3dcfx3-/src/babel/__tests__/fixtures/debug-sids.js:undefined:store [71:16]',
  })
  const {shortName} = createStore(null, {
    and: {
      name: 'foo',
    },
    sid: 'kn4cw44-/src/babel/__tests__/fixtures/debug-sids.js:undefined:store [72:22]',
  })
  createStore(null, {
    sid: 'c1fz6j3-/src/babel/__tests__/fixtures/debug-sids.js::store [74:2]',
  })
  createStore(null, {
    sid: 'ordyka4-/src/babel/__tests__/fixtures/debug-sids.js::store [76:2]',
  })
}
{
  const foo = createEvent({
    name: 'foo',
    sid: '2pw9ip2-/src/babel/__tests__/fixtures/debug-sids.js:foo:event [80:14]',
  })
  const bar = createEvent('hello', {
    name: 'bar',
    sid: '-o3v9ky2-/src/babel/__tests__/fixtures/debug-sids.js:bar:event [81:14]',
  })
  const baz = createEvent(
    {
      name: 'nice',
    },
    {
      name: 'baz',
      sid: 'ma6y862-/src/babel/__tests__/fixtures/debug-sids.js:baz:event [82:14]',
    },
  )

  const f = () =>
    createEvent({
      name: 'f',
      sid: '-9xcgz41-/src/babel/__tests__/fixtures/debug-sids.js:f:event [83:18]',
    })

  const {sid} = createEvent({
    sid: 'kfgb254-/src/babel/__tests__/fixtures/debug-sids.js:undefined:event [85:16]',
  })
  const {name} = createEvent('foo', {
    sid: '14tyf25-/src/babel/__tests__/fixtures/debug-sids.js:undefined:event [86:17]',
  })
  const {shortName} = createEvent(
    {
      name: 'foo',
    },
    {
      sid: '-i5se816-/src/babel/__tests__/fixtures/debug-sids.js:undefined:event [87:22]',
    },
  )
  createEvent({
    sid: 'btrxck3-/src/babel/__tests__/fixtures/debug-sids.js::event [89:2]',
  })
  createEvent({
    sid: 'ojpwqb4-/src/babel/__tests__/fixtures/debug-sids.js::event [91:2]',
  })
}
{
  const foo = createEvent({
    name: 'foo',
    sid: 'e6q2r63-/src/babel/__tests__/fixtures/debug-sids.js:foo:event [95:14]',
  })
  const a = restore(foo, null, {
    name: 'a',
    sid: 'rah4zj1-/src/babel/__tests__/fixtures/debug-sids.js:a:restore [96:12]',
  })
  const b = restore(foo, null, {
    and: {},
    name: 'b',
    sid: '-2lmvsw1-/src/babel/__tests__/fixtures/debug-sids.js:b:restore [97:12]',
  })
  const c = restore(foo, null, {
    and: 23020,
    name: 'c',
    sid: '-whqwlb1-/src/babel/__tests__/fixtures/debug-sids.js:c:restore [99:12]',
  })
  const config = {
    option: 0,
  }
  const dod = restore(foo, null, {
    and: config,
    name: 'dod',
    sid: '-mb06jt1-/src/babel/__tests__/fixtures/debug-sids.js:dod:restore [101:14]',
  })

  const f = a =>
    restore(foo, null, {
      name: 'f',
      sid: 'jw54zo1-/src/babel/__tests__/fixtures/debug-sids.js:f:restore [103:17]',
    })

  const {sid} = restore(foo, null, {
    sid: '87ucfi1-/src/babel/__tests__/fixtures/debug-sids.js:undefined:restore [105:16]',
  })
  const {shortName} = restore(foo, null, {
    and: {
      name: 'bar',
    },
    sid: '4rl7sf2-/src/babel/__tests__/fixtures/debug-sids.js:undefined:restore [106:22]',
  })
  restore(foo, null, {
    sid: 'rbv93e1-/src/babel/__tests__/fixtures/debug-sids.js::restore [108:2]',
  })
  restore(foo, null, {
    sid: 'yknbe12-/src/babel/__tests__/fixtures/debug-sids.js::restore [110:2]',
  })
}
"
`;

exports[`babel-plugin should default factories 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/default-factories.js'
import {withFactory as _withFactory} from 'effector'
import {createQuery} from '@farfetched/core'

const q = _withFactory({
  sid: '-4l3olk',
  fn: () =>
    createQuery({
      handler: async () => null,
    }),
  name: 'q',
  method: 'createQuery',
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 10,
  },
})
"
`;

exports[`babel-plugin should factories 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/factories.js'
import {withFactory as _withFactory2} from 'effector'
import {a} from '../a'
import {a1} from './a'
import {b} from './b'
import {c} from 'c/d'
import {e} from '~/e'
import {f} from '@/f'
import f1 from '@/f'
import {g} from '../g'
import {g1} from '../g.ts'
import {g2} from './g.ts'
const withFactory = 1
const _withFactory = 2

const a_val = _withFactory2({
  sid: '-wis8ct',
  fn: () => a(0),
  name: 'a_val',
  method: 'a',
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 14,
  },
})

const a1_val = a1(0)

const b_val = _withFactory2({
  sid: '-hudy4r',
  fn: () => b(0),
  name: 'b_val',
  method: 'b',
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 14,
  },
})

const c_val = _withFactory2({
  sid: '-35znwp',
  fn: () => c(0),
  name: 'c_val',
  method: 'c',
  loc: {
    file: _effectorFileName,
    line: 18,
    column: 14,
  },
})

const e_val = _withFactory2({
  sid: 'q6swjf',
  fn: () => e(0),
  name: 'e_val',
  method: 'e',
  loc: {
    file: _effectorFileName,
    line: 19,
    column: 14,
  },
})

const f_val = _withFactory2({
  sid: '-u5wv7n',
  fn: () => f(0),
  name: 'f_val',
  method: 'f',
  loc: {
    file: _effectorFileName,
    line: 20,
    column: 14,
  },
})

const f1_val = _withFactory2({
  sid: '-5ywm9h',
  fn: () => f1(0),
  name: 'f1_val',
  method: 'default',
  loc: {
    file: _effectorFileName,
    line: 21,
    column: 15,
  },
})

const g_val = _withFactory2({
  sid: '-fhikzl',
  fn: () => g(0),
  name: 'g_val',
  method: 'g',
  loc: {
    file: _effectorFileName,
    line: 22,
    column: 14,
  },
})

const g1_val = _withFactory2({
  sid: 'dz3ko1',
  fn: () => g1(0),
  name: 'g1_val',
  method: 'g1',
  loc: {
    file: _effectorFileName,
    line: 23,
    column: 15,
  },
})

const g2_val = g2(0)

const {foo, bar} = _withFactory2({
  sid: 'vnc5xc',
  fn: () => a(0),
  name: 'none',
  method: 'a',
  loc: {
    file: _effectorFileName,
    line: 25,
    column: 19,
  },
})
"
`;

exports[`babel-plugin should factories only with name with options 1`] = `
"import {withFactory as _withFactory} from 'effector'
import {itIsALongName, Randomizing} from 'c/d'
import Defaulting, {AnotherImport} from '@/f'
import {splitMap} from 'patronum/split-map'

const longer = _withFactory({
  sid: 'ofxitr',
  fn: () => itIsALongName(0),
  name: 'longer',
  method: 'itIsALongName',
})

const arcade = _withFactory({
  sid: '-cbwhq4',
  fn: () =>
    Defaulting({
      source: longer,
      condition: _withFactory({
        sid: 'yov724',
        fn: () =>
          AnotherImport({
            test: true,
          }),
        name: 'condition',
        method: 'AnotherImport',
      }),
    }),
  name: 'arcade',
  method: 'default',
})

_withFactory({
  sid: '-lga8jj',
  fn: () =>
    Randomizing({
      arcade,
    }),
  name: 'none',
  method: 'Randomizing',
})

const result = _withFactory({
  sid: '-km9f2',
  fn: () =>
    splitMap({
      longer,
      source: arcade,
    }),
  name: 'result',
  method: 'splitMap',
})
"
`;

exports[`babel-plugin should factories without name with options 1`] = `
"import {withFactory as _withFactory} from 'effector'
import {itIsALongName, Randomizing} from 'c/d'
import Defaulting, {AnotherImport} from '@/f'
import {splitMap} from 'patronum/split-map'

const longer = _withFactory({
  sid: '-6nipea',
  fn: () => itIsALongName(0),
})

const arcade = _withFactory({
  sid: '1z9ujn',
  fn: () =>
    Defaulting({
      source: longer,
      condition: _withFactory({
        sid: '-rvq05f',
        fn: () =>
          AnotherImport({
            test: true,
          }),
      }),
    }),
})

_withFactory({
  sid: 'jnpdpc',
  fn: () =>
    Randomizing({
      arcade,
    }),
})

const result = _withFactory({
  sid: 'gv5z4j',
  fn: () =>
    splitMap({
      longer,
      source: arcade,
    }),
})
"
`;

exports[`babel-plugin should forward 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/forward.js'
import {createStore, createEvent, forward} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-4327d3',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '-v4hsap',
})
const baz1 = forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: '-ldlh3f',
  },
})
const baz2 = forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: 'jrek3a',
  },
})
forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 0,
    },
    sid: 'iqu01r',
  },
})
forward({
  and: {
    from: foo,
    to: bar,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 0,
    },
    sid: '-xjlugw',
  },
})
const config = {
  from: foo,
  to: bar,
}
const baz5 = forward({
  and: config,
  or: {
    loc: {
      file: _effectorFileName,
      line: 23,
      column: 13,
    },
    name: 'baz5',
    sid: '146jp5',
  },
})

const f = () =>
  forward({
    and: {
      from: foo,
      to: bar,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 26,
        column: 2,
      },
      name: 'f',
      sid: '-508tab',
    },
  })

{
  const incorrect = forward({
    from: foo,
    to: bar,
  })

  function forward() {}
}
{
  const forward = () => {}

  if (true) {
    const incorrect = forward({
      from: foo,
      to: bar,
    })
  }
}
"
`;

exports[`babel-plugin should guard 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/guard.js'
import {createStore, createEvent, guard} from 'effector'
const foo = createStore(true, {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'ze97ix',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '8ctmlb',
})
const baz1 = guard({
  and: [
    bar,
    {
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: '-i7jaq3',
  },
})
const baz2 = guard({
  and: [
    {
      source: bar,
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: '-3j50i2',
  },
})
guard({
  and: [
    bar,
    {
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 0,
    },
    sid: '-2br2m9',
  },
})
guard({
  and: [
    {
      source: bar,
      filter: foo,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 0,
    },
    sid: 'u9p000',
  },
})
const spread = [
  bar,
  {
    filter: foo,
  },
]
const baz4 = guard({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 13,
    },
    name: 'baz4',
    sid: 'ptnjy0',
  },
})
const config = {
  source: bar,
  filter: foo,
}
const baz5 = guard({
  and: [config],
  or: {
    loc: {
      file: _effectorFileName,
      line: 26,
      column: 13,
    },
    name: 'baz5',
    sid: '-uj27t3',
  },
})

const f = () =>
  guard({
    and: [
      {
        source: bar,
        filter: foo,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 29,
        column: 2,
      },
      name: 'f',
      sid: '-g24vnn',
    },
  })

{
  const incorrect = guard(bar, {
    filter: foo,
  })

  function guard() {}
}
{
  const guard = () => {}

  if (true) {
    const incorrect = guard(bar, {
      filter: foo,
    })
  }
}
"
`;

exports[`babel-plugin should import from another packages 1`] = `
"var _effectorFileName =
  '/src/babel/__tests__/fixtures/import-from-another-packages.js'
import merge from 'mergedeep'
import {createStore} from 'redux'
const example = merge([a, b])
const store = createStore(0)
"
`;

exports[`babel-plugin should imports 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/imports.js'
import {
  createStore as createStoreEffector,
  attach as attachEffector,
  clearNode as clearNodeEffector,
  combine as combineEffector,
  createApi as createApiEffector,
  createDomain as createDomainEffector,
  createEffect as createEffectEffector,
  createNode as createNodeEffector,
  createEvent as createEventEffector,
  forward as forwardEffector,
  fromObservable as fromObservableEffector,
  guard as guardEffector,
  launch as launchEffector,
  merge as mergeEffector,
  restore as restoreEffector,
  sample as sampleEffector,
  split as splitEffector,
  withRegion as withRegionEffector,
  hydrate as hydrateEffector,
  serialize as serializeEffector,
  scopeBind as scopeBindEffector,
  fork as forkEffector,
  allSettled as allSettledEffector,
} from 'effector'
import {createStore} from 'redux'
{
  const domain = createDomainEffector({
    loc: {
      file: _effectorFileName,
      line: 29,
      column: 17,
    },
    name: 'domain',
    sid: '4pzx4x',
  })
  const event = createEventEffector({
    loc: {
      file: _effectorFileName,
      line: 30,
      column: 16,
    },
    name: 'event',
    sid: '71ddkt',
  })
  const store = createStoreEffector(0, {
    loc: {
      file: _effectorFileName,
      line: 31,
      column: 16,
    },
    name: 'store',
    sid: '-orb9v9',
  })
  const effect = createEffectEffector({
    loc: {
      file: _effectorFileName,
      line: 32,
      column: 17,
    },
    name: 'effect',
    sid: 'lln89a',
  })
  const domainEvent = domain.createEvent({
    loc: {
      file: _effectorFileName,
      line: 33,
      column: 22,
    },
    name: 'domainEvent',
    sid: '-d9gejr',
  })
  const scope = forkEffector(domain)
  const node = createNodeEffector()
  const a = attachEffector({
    and: {
      effect,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 37,
        column: 12,
      },
      name: 'a',
      sid: '-dquj8l',
    },
  })
  const b = clearNodeEffector(node)
  const c = combineEffector({
    and: [
      {
        store,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 39,
        column: 12,
      },
      name: 'c',
      sid: '-wu3m51',
    },
  })
  const d = createApiEffector({
    and: [store, {}],
    or: {
      loc: {
        file: _effectorFileName,
        line: 40,
        column: 12,
      },
      sid: 'gpupr5',
    },
  })
  const j = forwardEffector({
    and: {
      from: event,
      to: store,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 41,
        column: 12,
      },
      name: 'j',
      sid: 'f4rgs8',
    },
  })
  const l = guardEffector({
    and: [
      {
        source: event,
        filter: Boolean,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 42,
        column: 12,
      },
      name: 'l',
      sid: '-t2r6ee',
    },
  })
  const m = launchEffector(event, null)
  const n = mergeEffector([event], {
    loc: {
      file: _effectorFileName,
      line: 44,
      column: 12,
    },
    name: 'n',
    sid: 'gmkk8',
  })
  const o = restoreEffector(event, null, {
    loc: {
      file: _effectorFileName,
      line: 45,
      column: 12,
    },
    name: 'o',
    sid: '-xy3ce2',
  })
  const p = sampleEffector({
    and: [
      {
        source: store,
        clock: event,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 46,
        column: 12,
      },
      name: 'p',
      sid: 'n372p',
    },
  })
  const q = splitEffector({
    and: [event, {}],
    or: {
      loc: {
        file: _effectorFileName,
        line: 47,
        column: 12,
      },
      sid: '-z6ylmr',
    },
  })
  const r = withRegionEffector(node, () => {})
  const s = hydrateEffector(scope, {
    values: {},
  })
  const t = serializeEffector(scope)
  const u = scopeBindEffector(domainEvent)
  const w = allSettledEffector(domainEvent, {
    scope,
  })
}

function nameClashCheck() {
  const domain = createDomain()
  const event = createEvent()
  const store = createStore(0)
  const effect = createEffect()
  const domainEvent = domain.createEvent({
    loc: {
      file: _effectorFileName,
      line: 60,
      column: 22,
    },
    name: 'domainEvent',
    sid: '-bldidk',
  })
  const scope = fork(domain)
  const node = createNode()
  const a = attach({
    effect,
  })
  const b = clearNode(node)
  const c = combine({
    store,
  })
  const d = createApi(store, {})
  const j = forward({
    from: event,
    to: store,
  })
  const l = guard({
    source: event,
    filter: Boolean,
  })
  const m = launch(event, null)
  const n = merge([event])
  const o = restore(event, null)
  const p = sample({
    source: store,
    clock: event,
  })
  const q = split(event, {})
  const r = withRegion(node, () => {})
  const s = hydrate(scope, {
    values: {},
  })
  const t = serialize(scope)
  const u = scopeBind(domainEvent)
  const w = allSettled(domainEvent, {
    scope,
  })
}

const reduxStore = createStore(() => 0)
import {
  createStore as attach,
  createStore as clearNode,
  createStore as combine,
  createStore as createApi,
  createStore as createDomain,
  createStore as createEffect,
  createStore as createNode,
  createStore as createEvent,
  createStore as forward,
  createStore as fromObservable,
  createStore as guard,
  createStore as launch,
  createStore as merge,
  createStore as restore,
  createStore as sample,
  createStore as split,
  createStore as withRegion,
  createStore as hydrate,
  createStore as serialize,
  createStore as scopeBind,
  createStore as fork,
  createStore as allSettled,
} from 'redux'
"
`;

exports[`babel-plugin should imports globals 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/imports-globals.js'
const domain = createDomain({
  loc: {
    file: _effectorFileName,
    line: 1,
    column: 15,
  },
  name: 'domain',
  sid: '-8kirks',
})
const event = createEvent({
  loc: {
    file: _effectorFileName,
    line: 2,
    column: 14,
  },
  name: 'event',
  sid: '4bg4l6',
})
const store = createStore(0, {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 14,
  },
  name: 'store',
  sid: '-rh8iuw',
})
const effect = createEffect({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 15,
  },
  name: 'effect',
  sid: '8b4jjl',
})
const domainEvent = domain.createEvent({
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 20,
  },
  name: 'domainEvent',
  sid: '6xdy3a',
})
const scope = fork(domain)
const node = createNode()
const a = attach({
  and: {
    effect,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 9,
      column: 10,
    },
    name: 'a',
    sid: '9hp3i6',
  },
})
const b = clearNode(node)
const c = combine({
  and: [
    {
      store,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 11,
      column: 10,
    },
    name: 'c',
    sid: '-msbkuw',
  },
})
const d = createApi({
  and: [store, {}],
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 10,
    },
    sid: '-qwkge4',
  },
})
const e = forward({
  and: {
    from: event,
    to: store,
  },
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 10,
    },
    name: 'e',
    sid: 'wkvi28',
  },
})
const f = guard({
  and: [
    {
      source: event,
      filter: Boolean,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 14,
      column: 10,
    },
    name: 'f',
    sid: 'l33lld',
  },
})
const g = launch(event, null)
const h = merge([event], {
  loc: {
    file: _effectorFileName,
    line: 16,
    column: 10,
  },
  name: 'h',
  sid: '-kempf5',
})
const i = restore(event, null, {
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 10,
  },
  name: 'i',
  sid: 'de4pod',
})
const j = sample({
  and: [
    {
      source: store,
      clock: event,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 18,
      column: 10,
    },
    name: 'j',
    sid: '-6zvwli',
  },
})
const k = split({
  and: [event, {}],
  or: {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 10,
    },
    sid: 'xf7nog',
  },
})
const l = withRegion(node, () => {})
const n = hydrate(scope, {
  values: {},
})
const o = serialize(scope)
const p = scopeBind(domainEvent)
const q = allSettled(domainEvent, {
  scope,
})
"
`;

exports[`babel-plugin should localVariables 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/localVariables.js'
import {createEvent} from 'effector'

function A() {
  const createEvent = 123
}

function B() {
  return createEvent({
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 9,
    },
    sid: '-x1zwzh',
  })
}
"
`;

exports[`babel-plugin should merge 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/merge.js'
import {createEvent, merge} from 'effector'
const foo = createEvent({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '4d42n3',
})
const a = merge([foo], {
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'a',
  sid: 'dt92rl',
})
const b = merge([foo], {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'b',
  sid: 'shnczm',
})
const {sid} = merge([foo], {
  loc: {
    file: _effectorFileName,
    line: 7,
    column: 14,
  },
  sid: 'p2ot80',
})
merge([foo], {
  loc: {
    file: _effectorFileName,
    line: 9,
    column: 0,
  },
  sid: '3h0ydq',
})
const args = [[foo]]
const c = merge(...args, {
  loc: {
    file: _effectorFileName,
    line: 13,
    column: 10,
  },
  name: 'c',
  sid: '-rv2erh',
})
{
  const incorrect = merge([foo])

  function merge() {}
}
{
  const merge = () => {}

  if (true) {
    const incorrect = merge([foo])
  }
}
"
`;

exports[`babel-plugin should references 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/references.js'

function outerScope() {
  const createDomain = bar
  const createEvent = bar
  const createStore = foo
  const createEffect = foo
  const fork = foo
  const createNode = foo
  const attach = foo
  const clearNode = foo
  const combine = foo
  const createApi = foo
  const forward = foo
  const guard = foo
  const launch = foo
  const merge = foo
  const restore = foo
  const sample = foo
  const split = foo
  const withRegion = foo
  const hydrate = foo
  const serialize = foo
  const scopeBind = foo
  const allSettled = foo

  function nameClashCheck() {
    const domain = createDomain()
    const event = createEvent()
    const store = createStore(0)
    const effect = createEffect()
    const domainEvent = domain.createEvent({
      loc: {
        file: _effectorFileName,
        line: 29,
        column: 24,
      },
      name: 'domainEvent',
      sid: '-e37g89',
    })
    const scope = fork(domain)
    const node = createNode()
    const a = attach({
      effect,
    })
    const b = clearNode(node)
    const c = combine({
      store,
    })
    const d = createApi(store, {})
    const e = forward({
      from: event,
      to: store,
    })
    const f = guard({
      source: event,
      filter: Boolean,
    })
    const g = launch(event, null)
    const h = merge([event])
    const i = restore(event, null)
    const j = sample({
      source: store,
      clock: event,
    })
    const k = split(event, {})
    const l = withRegion(node, () => {})
    const n = hydrate(scope, {
      values: {},
    })
    const o = serialize(scope)
    const p = scopeBind(domainEvent)
    const q = allSettled(domainEvent, {
      scope,
    })
  }
}

function foo() {}

const bar = () => {}
"
`;

exports[`babel-plugin should restore 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/restore.js'
import {createEvent, restore} from 'effector'
const foo = createEvent({
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-dwt0l3',
})
const a = restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 10,
  },
  name: 'a',
  sid: 'm4lo48',
})
const b = restore(foo, null, {
  and: {},
  loc: {
    file: _effectorFileName,
    line: 5,
    column: 10,
  },
  name: 'b',
  sid: '-7rico7',
})
const c = restore(foo, null, {
  and: 23020,
  loc: {
    file: _effectorFileName,
    line: 6,
    column: 10,
  },
  name: 'c',
  sid: 'xdhoii',
})
const config = {
  option: 0,
}
const dod = restore(foo, null, {
  and: config,
  loc: {
    file: _effectorFileName,
    line: 8,
    column: 12,
  },
  name: 'dod',
  sid: '-by5nyo',
})

const f = a =>
  restore(foo, null, {
    loc: {
      file: _effectorFileName,
      line: 10,
      column: 15,
    },
    name: 'f',
    sid: 'eq9o4d',
  })

const {sid} = restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 12,
    column: 14,
  },
  sid: '-5gftmh',
})
const {shortName} = restore(foo, null, {
  and: {
    name: 'bar',
  },
  loc: {
    file: _effectorFileName,
    line: 13,
    column: 20,
  },
  sid: '-3scxga',
})
restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 15,
    column: 0,
  },
  sid: 'b4gjpt',
})
restore(foo, null, {
  loc: {
    file: _effectorFileName,
    line: 17,
    column: 0,
  },
  sid: 'tv4r6a',
})
{
  const incorrect = restore(foo, null)

  function restore() {}
}
{
  const restore = () => {}

  if (true) {
    const incorrect = restore(foo, null)
  }
}
"
`;

exports[`babel-plugin should sample 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/sample.js'
import {createStore, createEvent, sample} from 'effector'
const foo = createStore('foo', {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: 'v1d24s',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: '3zxh76',
})
const baz1 = sample({
  and: [foo, bar],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    name: 'baz1',
    sid: 'bsgoy5',
  },
})
const baz2 = sample({
  and: [
    {
      source: foo,
      clock: bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 13,
    },
    name: 'baz2',
    sid: '-uf0vys',
  },
})
sample({
  and: [foo, bar],
  or: {
    loc: {
      file: _effectorFileName,
      line: 12,
      column: 0,
    },
    sid: 'w5joxv',
  },
})
sample({
  and: [
    {
      source: foo,
      clock: bar,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 13,
      column: 0,
    },
    sid: 'w0xds4',
  },
})
const spread = [foo, bar]
const baz4 = sample({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 13,
    },
    name: 'baz4',
    sid: 'r8825m',
  },
})
const config = {
  source: foo,
  clock: bar,
}
const baz5 = sample({
  and: [config],
  or: {
    loc: {
      file: _effectorFileName,
      line: 26,
      column: 13,
    },
    name: 'baz5',
    sid: '-ez9irb',
  },
})

const f = () =>
  sample({
    and: [
      {
        source: foo,
        clock: bar,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 29,
        column: 2,
      },
      name: 'f',
      sid: 'g2pvun',
    },
  })

{
  const incorrect = sample(config)

  function sample() {}
}
{
  const sample = () => {}

  if (true) {
    const incorrect = sample(config)
  }
}
"
`;

exports[`babel-plugin should split 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/split.js'
import {createStore, createEvent, split} from 'effector'
const foo = createStore([], {
  loc: {
    file: _effectorFileName,
    line: 3,
    column: 12,
  },
  name: 'foo',
  sid: '-f4bu9o',
})
const bar = createEvent({
  loc: {
    file: _effectorFileName,
    line: 4,
    column: 12,
  },
  name: 'bar',
  sid: 'svcmru',
})
const baz1 = split({
  and: [
    foo,
    {
      nonEmpty: list => list.length === 0,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 6,
      column: 13,
    },
    sid: '3uu2eh',
  },
})
split({
  and: [
    foo,
    {
      nonEmpty: list => list.length === 0,
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 7,
      column: 0,
    },
    sid: '-yktwye',
  },
})
const baz2 = split({
  and: [
    {
      source: foo,
      match: {
        nonEmpty: list => list.length === 0,
      },
      cases: {
        nonEmpty: bar,
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 8,
      column: 13,
    },
    sid: '-1zduc5',
  },
})
split({
  and: [
    {
      source: foo,
      match: {
        nonEmpty: list => list.length === 0,
      },
      cases: {
        nonEmpty: bar,
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName,
      line: 14,
      column: 0,
    },
    sid: 'um28a4',
  },
})
const spread = [
  foo,
  {
    nonEmpty: list => list.length === 0,
  },
]
const baz4 = split({
  and: [...spread],
  or: {
    loc: {
      file: _effectorFileName,
      line: 21,
      column: 13,
    },
    sid: '-7tlr2r',
  },
})
const config = {
  source: foo,
  match: {
    nonEmpty: list => list.length === 0,
  },
  cases: {
    nonEmpty: bar,
  },
}
const baz5 = split({
  and: [config],
  or: {
    loc: {
      file: _effectorFileName,
      line: 29,
      column: 13,
    },
    sid: 'orubji',
  },
})

const f = () =>
  split({
    and: [
      foo,
      {
        nonEmpty: list => list.length === 0,
      },
    ],
    or: {
      loc: {
        file: _effectorFileName,
        line: 31,
        column: 16,
      },
      sid: '-dntntd',
    },
  })

{
  const incorrect = split({
    source: foo,
    match: {
      nonEmpty: list => list.length === 0,
    },
    cases: {
      nonEmpty: bar,
    },
  })

  function split() {}
}
{
  const split = () => {}

  if (true) {
    const incorrect = split({
      source: foo,
      match: {
        nonEmpty: list => list.length === 0,
      },
      cases: {
        nonEmpty: bar,
      },
    })
  }
}
"
`;

exports[`babel-plugin should units without name with options 1`] = `
"import {
  createDomain,
  createEffect,
  createEvent,
  createStore,
  restore,
} from 'effector'
{
  const domain = createDomain({
    sid: '-q3kak7',
  })
  const a = domain.store('bar', {
    sid: 'ik51kz',
  })
  const b = domain.store('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    sid: 'x8jbt0',
  })
  const c = domain.store('h', {
    and: {
      name: 'test',
    },
    sid: '-n46fy3',
  })
  const d = domain.store('h', {
    and: null,
    sid: '-8fs5q2',
  })
  const e = domain.store('h', {
    and: 4234,
    sid: '68m4hz',
  })
  const f = domain.store('h', {
    and: {},
    sid: 'kx0eq0',
  })
  const aAlias = domain.createStore('bar', {
    sid: 'i9nz23',
  })
  const bAlias = domain.createStore('h', {
    and: {
      option: 'test',
      ['na' + 'me']: 'LOL',
    },
    sid: 'keinx6',
  })
  const cAlias = domain.createStore('h', {
    and: {
      name: 'testAlias',
    },
    sid: 'mjdcs9',
  })
  const dAlias = domain.createStore('h', {
    and: null,
    sid: 'oo81nc',
  })
  const eAlias = domain.createStore('h', {
    and: 4234,
    sid: 'qt2qif',
  })
  const fAlias = domain.createStore('h', {
    and: {},
    sid: 'sxxfdi',
  })
  const {sid} = domain.createStore(null, {
    sid: 'ir5khe',
  })
  const {shortName} = domain.createStore(null, {
    and: {
      name: 'foo',
    },
    sid: 'eoi837',
  })
  domain.createStore(null, {
    sid: 'lyft1o',
  })
  domain.createStore(null, {
    sid: 'nmip7v',
  })
}
{
  const foo = createEffect({
    sid: 'k58yqp',
  })
  const bar = createEffect('hello', {
    sid: '-6oikcy',
  })
  const baz = createEffect(
    {
      handler() {
        return 0
      },
    },
    {
      sid: '-vbkeiy',
    },
  )
  const quux = createEffect('nice', {
    and: {
      handler() {
        return 0
      },
    },
    sid: '-jvy4qc',
  })

  const fa = () =>
    createEffect({
      sid: '-dvscao',
    })

  const {sid} = createEffect({
    sid: 'ijhinf',
  })
  const {name} = createEffect('foo', {
    sid: 'egu698',
  })
  const {shortName} = createEffect(
    {
      name: 'foo',
    },
    {
      sid: 'ae6tv1',
    },
  )
  createEffect({
    sid: 'lqrr7p',
  })
  createEffect({
    sid: 'neundw',
  })
}
{
  const foo = createStore('foo', {
    sid: 'kcx0ko',
  })
  const a = createStore('h', {
    sid: '-qhb24',
  })
  const b = createStore('h', {
    and: {},
    sid: 'dxwz5x',
  })
  const c = createStore('h', {
    and: 23020,
    sid: 'smb9dy',
  })
  const config = {
    option: 0,
  }
  const dod = createStore(null, {
    and: config,
    sid: '-aa40bp',
  })

  const f = a =>
    createStore(a, {
      sid: '1me22x',
    })

  const {sid} = createStore(null, {
    sid: 'aluvp0',
  })
  const {shortName} = createStore(null, {
    and: {
      name: 'foo',
    },
    sid: '6j7jat',
  })
  createStore(null, {
    sid: 'palle2',
  })
  createStore(null, {
    sid: 'qyohk9',
  })
}
{
  const foo = createEvent({
    sid: 'gozu3m',
  })
  const bar = createEvent('hello', {
    sid: '-a4rp01',
  })
  const baz = createEvent(
    {
      name: 'nice',
    },
    {
      sid: '-yrtj61',
    },
  )

  const f = () =>
    createEvent({
      sid: 'kpccw1',
    })

  const {sid} = createEvent({
    sid: '6bjhgu',
  })
  const {name} = createEvent('foo', {
    sid: '28w52n',
  })
  const {shortName} = createEvent(
    {
      name: 'foo',
    },
    {
      sid: '-1tr7bk',
    },
  )
  createEvent({
    sid: 'p2xjk3',
  })
  createEvent({
    sid: 'qr0fqa',
  })
}
{
  const foo = createEvent({
    sid: 'd8qpgj',
  })
  const a = restore(foo, null, {
    sid: '-eugej4',
  })
  const b = restore(foo, null, {
    and: {},
    sid: 'qajmnl',
  })
  const c = restore(foo, null, {
    and: 23020,
    sid: '-3lke4u',
  })
  const config = {
    option: 0,
  }
  const dod = restore(foo, null, {
    and: config,
    sid: '-sc6x6g',
  })

  const f = a =>
    restore(foo, null, {
      sid: '-m8seiz',
    })

  const {sid} = restore(foo, null, {
    sid: 'ucc0v3',
  })
  const {shortName} = restore(foo, null, {
    and: {
      name: 'bar',
    },
    sid: 'mcd6lc',
  })
  restore(foo, null, {
    sid: '-hkbsqv',
  })
  restore(foo, null, {
    sid: 'nkft5k',
  })
}
"
`;

exports[`babel-plugin support multiple passes of babel plugin 1`] = `
"var _effectorFileName = '/src/babel/__tests__/fixtures/multiPass.js',
  _effectorFileName2 = '/src/babel/__tests__/fixtures/multiPass.js'
import {
  attach,
  combine,
  createDomain,
  createEffect,
  createEvent,
  createStore,
  createApi,
  forward,
  guard,
  merge,
  restore,
  sample,
  split,
} from 'effector'
const korben = attach({
  and: {
    and: {
      effect() {},
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 17,
        column: 15,
      },
      name: 'korben',
      sid: 'jiikdl',
    },
  },
  or: {
    loc: {
      file: _effectorFileName2,
      line: 17,
      column: 15,
    },
    name: 'korben',
    sid: 'jiikdl',
  },
})
const dallas = combine({
  and: [
    {
      and: [{}, () => {}],
      or: {
        loc: {
          file: _effectorFileName,
          line: 18,
          column: 15,
        },
        name: 'dallas',
        sid: 'rpkq19',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 18,
      column: 15,
    },
    name: 'dallas',
    sid: 'rpkq19',
  },
})
const c = createDomain(
  {
    loc: {
      file: _effectorFileName,
      line: 19,
      column: 10,
    },
    name: 'c',
    sid: '-fighh2',
  },
  {
    loc: {
      file: _effectorFileName2,
      line: 19,
      column: 10,
    },
    name: 'c',
    sid: '-fighh2',
  },
)
const d = createEffect(
  {
    loc: {
      file: _effectorFileName,
      line: 20,
      column: 10,
    },
    name: 'd',
    sid: '-u2791',
  },
  {
    loc: {
      file: _effectorFileName2,
      line: 20,
      column: 10,
    },
    name: 'd',
    sid: '-u2791',
  },
)
const e = createEvent(
  {
    loc: {
      file: _effectorFileName,
      line: 21,
      column: 10,
    },
    name: 'e',
    sid: 'duc2z0',
  },
  {
    loc: {
      file: _effectorFileName2,
      line: 21,
      column: 10,
    },
    name: 'e',
    sid: 'duc2z0',
  },
)
const f = createStore(null, {
  and: {
    loc: {
      file: _effectorFileName,
      line: 22,
      column: 10,
    },
    name: 'f',
    sid: 'sqef10',
  },
  loc: {
    file: _effectorFileName2,
    line: 22,
    column: 10,
  },
  name: 'f',
  sid: 'sqef10',
})
const g = createApi({
  and: [
    {
      and: [f, {}],
      or: {
        loc: {
          file: _effectorFileName,
          line: 23,
          column: 10,
        },
        sid: 'd3ww9p',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 23,
      column: 10,
    },
    sid: 'd3ww9p',
  },
})
const h = forward({
  and: {
    and: {
      from: d,
      to: e,
    },
    or: {
      loc: {
        file: _effectorFileName,
        line: 24,
        column: 10,
      },
      name: 'h',
      sid: 'cxmray',
    },
  },
  or: {
    loc: {
      file: _effectorFileName2,
      line: 24,
      column: 10,
    },
    name: 'h',
    sid: 'cxmray',
  },
})
const i = guard({
  and: [
    {
      and: [
        e,
        {
          filter: Boolean,
        },
      ],
      or: {
        loc: {
          file: _effectorFileName,
          line: 25,
          column: 10,
        },
        name: 'i',
        sid: '1jw17f',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 25,
      column: 10,
    },
    name: 'i',
    sid: '1jw17f',
  },
})
const j = merge([e], {
  and: {
    loc: {
      file: _effectorFileName,
      line: 26,
      column: 10,
    },
    name: 'j',
    sid: 'gevhy0',
  },
  loc: {
    file: _effectorFileName2,
    line: 26,
    column: 10,
  },
  name: 'j',
  sid: 'gevhy0',
})
const k = restore(d, null, {
  and: {
    loc: {
      file: _effectorFileName,
      line: 27,
      column: 10,
    },
    name: 'k',
    sid: 'nmzzpi',
  },
  loc: {
    file: _effectorFileName2,
    line: 27,
    column: 10,
  },
  name: 'k',
  sid: 'nmzzpi',
})
const m = sample({
  and: [
    {
      and: [
        {
          clock: e,
          source: f,
        },
      ],
      or: {
        loc: {
          file: _effectorFileName,
          line: 28,
          column: 10,
        },
        name: 'm',
        sid: 'qqm168',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 28,
      column: 10,
    },
    name: 'm',
    sid: 'qqm168',
  },
})
const n = split({
  and: [
    {
      and: [f, {}],
      or: {
        loc: {
          file: _effectorFileName,
          line: 29,
          column: 10,
        },
        sid: '-5aen47',
      },
    },
  ],
  or: {
    loc: {
      file: _effectorFileName2,
      line: 29,
      column: 10,
    },
    sid: '-5aen47',
  },
})
"
`;
